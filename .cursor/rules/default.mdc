---
description:
globs:
alwaysApply: true
---

the server code is stored in src/server and the pattern I use for all server code is actions.ts -> service.ts -> repository.ts. Never use api route handlers, always use actions.ts files to handle server code.

action.ts only contains calls to service.ts methods, service.ts contains business logic and calls to repository.ts methods, and repository.ts contains direct database calls using drizzle

service.ts files should make use of withAuth.ts for authorization and always creates an instance of the service class using serviceWrapper.ts

When writing drizzle queries, try to only return the necessary columns

When calling server code in the client components, use tanstack query and strictly call code in actions.ts files

When creating types from the schema file, please use the syntax: `type TableName = typeof tableName.$inferSelect`.

When breaking up components or creating additional functionality, put the new component in the same directory as the parent component, unless the component is a shared component, then put it in src/app/components

Use Mantine for designing all UI components, keeping in mind that the parent layout allows the user to switch between light and dark mode, keep the UI a Mantine native as possible, don't add unnecessary styles and colors, try to stick to colors and styling defined in the mantine api

Instead of using "color='var(--mantine-color-green-6)" when defining color just simply use "color={'green'}"
